#!/usr/bin/python

import os
import time

# run a command, capture all its output, and return it as a string
def run(command) :
	(i, o) = os.popen2(command)
	i.close()
	r = o.read()
	o.close()
	return r

# run a command with specific arguments passed (avoids having to escape the arguments)
def runtty(command, arguments=[]) :
	pid = os.fork()
	if pid == 0 :
		os.execvp(command, [command] + arguments)
	else :
		(pid, status) = os.wait()
		return status

# split a string by newlines, drop blank lines. return as a list.
def splitnblines(s) :
	return filter(lambda s: s != '', s.split("\n"))

# find all the files in a directory with a specific extension.  It is advised not to use special characters in the extension.
def gfilesdir(d, ext) :
	return splitnblines(run("find \"%s\" -type f -name '*.%s'" % (d, ext)))

# calculate the size in kilobytes of a directory and all its children
def dirsize(p) :
	return int(run("du -sk \"%s\"|cut -f1" % p).split("\n")[0])

# given a list of song files and an iPod mountpoing, use gnupod to add the songs.
def addfiles(files, mountpoint) :
	cmd = 'gnupod_addsong'
	args = ['-m', mountpoint] + files
	runtty(cmd, args)

# a truly ugly hack: determine if any non-defunct processes of a given name exist... (or anything that sort of looks like it might be that process)
def psgrepc(cmd) :
	return int(run("ps aux|grep %s|grep -v ' grep'|grep -v '<defunct>'|wc -l" % cmd).split("\n")[0])

if __name__ == '__main__' :
	# assume a lot of things
	fpath = '/home/eastein/Media/Music/'
	ext = 'mp3'
	mountpoint = '/media/IPOD'
	# available storage, in kilobytes (more assumptions!)
	ak = 940469

	# get the dirs that contain the music files, in random order
	dirs = splitnblines(run("find %s -type f -name '*.%s'|sed -e 's_^\(.*\)/[^/]\+$_\\1_g'|grep -v '\"'|sort|uniq|rcat" % (fpath, ext)))
	dc = 0
	k = 0
	files = []
	# add directories until one doesn't fit (sort of ugly, as maybe other directories will fit later)
	for d in dirs :
		s = dirsize(d)
		if s + k > ak :
			break
		k += s
		dc += 1
		files += gfilesdir(d, ext)

	# add 20 files at a time
	per = 20
	f = 0
	# while there are still files to add...
	while len(files) > 0 :
		# split off the first 20 files (or less)
		af = files[:per]
		files = files[per:]
		# add them
		addfiles(af, mountpoint)
		# count them
		f += len(af)

	# since this script magically multithreads by accident (gnupod_addsong is still running when runtty returns, somehow)
	# it is best not to finish up while things are still running.
	# seriously, I'm surprised this works at all.
	while (psgrepc('gnupod_addsong') > 0) :
		time.sleep(1)

	# print some useless statistics
	print '%i files in %i directories.' % (f, dc)
